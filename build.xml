<?xml version="1.0" encoding="UTF-8"?>
<project name="blooddy_crypto" default="compile">

	<property file="build.properties" />
	
	<property name="src" value="${basedir}/src" />
	<property name="output" value="${basedir}/bin" />
	<property name="swc" value="${output}/blooddy_crypto.swc" />
	
	<property name="AIR_SDK_HOME" value="${flex.sdk}" />
    <property name="FLEX_HOME" value="${flex.sdk}" />
	
	<taskdef resource="flexTasks.tasks" classpath="${flex.sdk}/ant/lib/flexTasks.jar" />

	<filelist id="workers.files" dir="${src}">
		<file name="by/blooddy/crypto/Adler32.swf" />
		<file name="by/blooddy/crypto/Base64.swf" />
		<file name="by/blooddy/crypto/CRC32.swf" />
		<file name="by/blooddy/crypto/MD5.swf" />
		<file name="by/blooddy/crypto/SHA1.swf" />
		<file name="by/blooddy/crypto/SHA2.swf" />
		<file name="by/blooddy/crypto/serialization/JSONer.swf" />
		<file name="by/blooddy/crypto/image/JPEGEncoder.swf" />
		<file name="by/blooddy/crypto/image/PNGEncoder.swf" />
	</filelist>
	
	<target name="workers.delete">
		<delete>
			<filelist refid="workers.files" />
		</delete>
	</target>
	
	<target name="worker.compile">

		<mxmlc failonerror="true"
			file="${src}/by/blooddy/crypto/process/Worker$Background.as"
			output="${src}/${worker.path}/${worker.name}.swf"
			swf-version="17"
		>

			<load-config filename="${flex.sdk}/frameworks/air-config.xml" />
			<load-config filename="${basedir}/build.config.xml" />
			<load-config filename="${basedir}/build.config.worker.xml" />

			<source-path path-element="${src}" />

			<includes symbol="${worker.package}.${worker.name}" />

			<externs symbol="by.blooddy.crypto.process.Process$Concurrent" />
			<externs symbol="by.blooddy.crypto.process.Worker$" />
 
		</mxmlc>

	</target>

	<target name="workers.compile" depends="workers.delete">
		<parallel failonany="true"><!-- сперва зависимые друг от друга -->
			<antcall target="worker.compile">
				<param name="worker.path" value="by/blooddy/crypto/image" />
				<param name="worker.package" value="by.blooddy.crypto.image" />
				<param name="worker.name" value="PNGEncoder" />
			</antcall>
		</parallel>
		<parallel failonany="true">
			<antcall target="worker.compile">
				<param name="worker.path" value="by/blooddy/crypto/serialization" />
				<param name="worker.package" value="by.blooddy.crypto.serialization" />
				<param name="worker.name" value="JSONer" />
			</antcall>
			<antcall target="worker.compile">
				<param name="worker.path" value="by/blooddy/crypto/image" />
				<param name="worker.package" value="by.blooddy.crypto.image" />
				<param name="worker.name" value="JPEGEncoder" />
			</antcall>
			<antcall target="worker.compile">
				<param name="worker.path" value="by/blooddy/crypto" />
				<param name="worker.package" value="by.blooddy.crypto" />
				<param name="worker.name" value="Adler32" />
			</antcall>
			<antcall target="worker.compile">
				<param name="worker.path" value="by/blooddy/crypto" />
				<param name="worker.package" value="by.blooddy.crypto" />
				<param name="worker.name" value="Base64" />
			</antcall>
			<antcall target="worker.compile">
				<param name="worker.path" value="by/blooddy/crypto" />
				<param name="worker.package" value="by.blooddy.crypto" />
				<param name="worker.name" value="CRC32" />
			</antcall>
			<antcall target="worker.compile">
				<param name="worker.path" value="by/blooddy/crypto" />
				<param name="worker.package" value="by.blooddy.crypto" />
				<param name="worker.name" value="MD5" />
			</antcall>
			<antcall target="worker.compile">
				<param name="worker.path" value="by/blooddy/crypto" />
				<param name="worker.package" value="by.blooddy.crypto" />
				<param name="worker.name" value="SHA1" />
			</antcall>
			<antcall target="worker.compile">
				<param name="worker.path" value="by/blooddy/crypto" />
				<param name="worker.package" value="by.blooddy.crypto" />
				<param name="worker.name" value="SHA2" />
			</antcall>
		</parallel>
	</target>
	
	<target name="workers.touch" depends="workers.delete">
		<touch millis="0">
			<filelist refid="workers.files" />
		</touch>
	</target>
	
	<target name="library.compile" depends="workers.compile">

		<compc failonerror="true"
			output="${swc}"
			swf-version="10"
			include-classes="by.blooddy.crypto.Adler32 by.blooddy.crypto.Base64 by.blooddy.crypto.CRC32 by.blooddy.crypto.MD5 by.blooddy.crypto.SHA1 by.blooddy.crypto.SHA2 by.blooddy.crypto.serialization.JSONer by.blooddy.crypto.image.PNGEncoder by.blooddy.crypto.image.JPEGEncoder"
		>

			<load-config filename="${flex.sdk}/frameworks/air-config.xml" />
			<load-config filename="${basedir}/build.config.xml" />

			<source-path path-element="${src}" />

		</compc>

	</target>
	
	<target name="library.release" depends="library.compile">
		
		<unzip src="${swc}" dest="${output}" />
		
		<replaceregexp file="${output}/catalog.xml" match="\x3Cscript\s[^\x3E]*?name=\x22\x22.+?\x3C\/script\x3E" flags="sg" replace="" byline="false" />
		<replaceregexp file="${output}/catalog.xml" match="\x3Cdep\s[^\x3E]*?id=\x22(?!by\.|[^\x22]*?\$|avmplus\:DescribeType)[^\x22]*?\x22[^\x3E]*?\/\x3E" flags="sg" replace="" byline="false" />
		<replaceregexp file="${output}/catalog.xml" match="(\x3C[^\x3E]*?\x3E)\s+" flags="sg" replace="\1" byline="false" />

		<zip destfile="${swc}">
			<filelist dir="${output}">
				<file name="catalog.xml" />
				<file name="library.swf" />
			</filelist>
		</zip>

		<delete>
			<filelist dir="${output}">
				<file name="catalog.xml" />
				<file name="library.swf" />
			</filelist>

		</delete>

		
	</target>
	
	<target name="compile.debug" description="Compile Debug Project">

		<antcall target="library.compile" />
		<antcall target="workers.touch" />

	</target>

	<target name="compile.release" description="Compile Release Project">

		<antcall target="library.release" />
		<antcall target="workers.touch" />
	
	</target>

	<target name="build.release" description="Compile Release Project">
	
		<antcall target="compile.release" />

		<zip destfile="${output}/blooddy_crypto_v0.0.0.zip">
			<filelist dir="${output}">
				<file name="blooddy_crypto.swc" />
			</filelist>
			<filelist dir="${basedir}">
				<file name="LICENSE.md" />
			</filelist>
		</zip>
	
	</target>
	
	<target name="compile" description="Compile Project">
		<antcall target="build.release" />
	</target>

</project>